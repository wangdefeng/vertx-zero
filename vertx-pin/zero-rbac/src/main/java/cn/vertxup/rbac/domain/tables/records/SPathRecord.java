/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.records;


import cn.vertxup.rbac.domain.tables.SPath;
import cn.vertxup.rbac.domain.tables.interfaces.ISPath;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record20;
import org.jooq.Row20;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SPathRecord extends UpdatableRecordImpl<SPathRecord> implements Record20<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, ISPath {

    private static final long serialVersionUID = -1770127846;

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.KEY</code>. 「key」- 规则主键
     */
    @Override
    public SPathRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.KEY</code>. 「key」- 规则主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.NAME</code>. 「name」- 规则名称
     */
    @Override
    public SPathRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.NAME</code>. 「name」- 规则名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.CODE</code>. 「code」- 系统界面标识
     */
    @Override
    public SPathRecord setCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.CODE</code>. 「code」- 系统界面标识
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_MAPPING</code>. 「mapping」- 从 group -&gt; ui 转换
     */
    @Override
    public SPathRecord setGroupMapping(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_MAPPING</code>. 「mapping」- 从 group -&gt; ui 转换
     */
    @Override
    public String getGroupMapping() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_TYPE</code>. 「groupType」- 分组类型
     */
    @Override
    public SPathRecord setGroupType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_TYPE</code>. 「groupType」- 分组类型
     */
    @Override
    public String getGroupType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_COMPONENT</code>. 「groupComponent」- 必须绑定组专用Dao组件
     */
    @Override
    public SPathRecord setGroupComponent(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_COMPONENT</code>. 「groupComponent」- 必须绑定组专用Dao组件
     */
    @Override
    public String getGroupComponent() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_CONDITION</code>. 「groupCondition」- 分组条件
     */
    @Override
    public SPathRecord setGroupCondition(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_CONDITION</code>. 「groupCondition」- 分组条件
     */
    @Override
    public String getGroupCondition() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_CONFIG</code>. 「groupConfig」- 组配置信息，配置呈现部分
     */
    @Override
    public SPathRecord setGroupConfig(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_CONFIG</code>. 「groupConfig」- 组配置信息，配置呈现部分
     */
    @Override
    public String getGroupConfig() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UI_TYPE</code>. 「uiType」- 目标数据源类型
     */
    @Override
    public SPathRecord setUiType(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UI_TYPE</code>. 「uiType」- 目标数据源类型
     */
    @Override
    public String getUiType() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    @Override
    public SPathRecord setUiConfig(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    @Override
    public String getUiConfig() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UI_CONDITION</code>. 「uiCondition」- 查询模板
     */
    @Override
    public SPathRecord setUiCondition(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UI_CONDITION</code>. 「uiCondition」- 查询模板
     */
    @Override
    public String getUiCondition() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UI_COMPONENT</code>. 「uiComponent」- 在 DAO/OX/DEF 时的特殊组件
     */
    @Override
    public SPathRecord setUiComponent(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UI_COMPONENT</code>. 「uiComponent」- 在 DAO/OX/DEF 时的特殊组件
     */
    @Override
    public String getUiComponent() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public SPathRecord setSigma(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SPathRecord setLanguage(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SPathRecord setActive(Boolean value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public SPathRecord setMetadata(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public SPathRecord setCreatedAt(LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public SPathRecord setCreatedBy(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public SPathRecord setUpdatedAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public SPathRecord setUpdatedBy(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record20 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row20<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row20<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row20) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return SPath.S_PATH.KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return SPath.S_PATH.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return SPath.S_PATH.CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return SPath.S_PATH.GROUP_MAPPING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return SPath.S_PATH.GROUP_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return SPath.S_PATH.GROUP_COMPONENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return SPath.S_PATH.GROUP_CONDITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return SPath.S_PATH.GROUP_CONFIG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return SPath.S_PATH.UI_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field10() {
        return SPath.S_PATH.UI_CONFIG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field11() {
        return SPath.S_PATH.UI_CONDITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field12() {
        return SPath.S_PATH.UI_COMPONENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field13() {
        return SPath.S_PATH.SIGMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field14() {
        return SPath.S_PATH.LANGUAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field15() {
        return SPath.S_PATH.ACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field16() {
        return SPath.S_PATH.METADATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field17() {
        return SPath.S_PATH.CREATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field18() {
        return SPath.S_PATH.CREATED_BY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field19() {
        return SPath.S_PATH.UPDATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field20() {
        return SPath.S_PATH.UPDATED_BY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getGroupMapping();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getGroupType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getGroupComponent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component7() {
        return getGroupCondition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component8() {
        return getGroupConfig();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getUiType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component10() {
        return getUiConfig();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component11() {
        return getUiCondition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component12() {
        return getUiComponent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component13() {
        return getSigma();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component14() {
        return getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component15() {
        return getActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component16() {
        return getMetadata();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component17() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component18() {
        return getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component19() {
        return getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component20() {
        return getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getGroupMapping();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getGroupType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getGroupComponent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getGroupCondition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getGroupConfig();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getUiType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value10() {
        return getUiConfig();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value11() {
        return getUiCondition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value12() {
        return getUiComponent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value13() {
        return getSigma();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value14() {
        return getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value15() {
        return getActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value16() {
        return getMetadata();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value17() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value18() {
        return getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value19() {
        return getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value20() {
        return getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value1(String value) {
        setKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value3(String value) {
        setCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value4(String value) {
        setGroupMapping(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value5(String value) {
        setGroupType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value6(String value) {
        setGroupComponent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value7(String value) {
        setGroupCondition(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value8(String value) {
        setGroupConfig(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value9(String value) {
        setUiType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value10(String value) {
        setUiConfig(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value11(String value) {
        setUiCondition(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value12(String value) {
        setUiComponent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value13(String value) {
        setSigma(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value14(String value) {
        setLanguage(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value15(Boolean value) {
        setActive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value16(String value) {
        setMetadata(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value17(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value18(String value) {
        setCreatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value19(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord value20(String value) {
        setUpdatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SPathRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12, String value13, String value14, Boolean value15, String value16, LocalDateTime value17, String value18, LocalDateTime value19, String value20) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ISPath from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setGroupMapping(from.getGroupMapping());
        setGroupType(from.getGroupType());
        setGroupComponent(from.getGroupComponent());
        setGroupCondition(from.getGroupCondition());
        setGroupConfig(from.getGroupConfig());
        setUiType(from.getUiType());
        setUiConfig(from.getUiConfig());
        setUiCondition(from.getUiCondition());
        setUiComponent(from.getUiComponent());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ISPath> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SPathRecord
     */
    public SPathRecord() {
        super(SPath.S_PATH);
    }

    /**
     * Create a detached, initialised SPathRecord
     */
    public SPathRecord(String key, String name, String code, String groupMapping, String groupType, String groupComponent, String groupCondition, String groupConfig, String uiType, String uiConfig, String uiCondition, String uiComponent, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(SPath.S_PATH);

        set(0, key);
        set(1, name);
        set(2, code);
        set(3, groupMapping);
        set(4, groupType);
        set(5, groupComponent);
        set(6, groupCondition);
        set(7, groupConfig);
        set(8, uiType);
        set(9, uiConfig);
        set(10, uiCondition);
        set(11, uiComponent);
        set(12, sigma);
        set(13, language);
        set(14, active);
        set(15, metadata);
        set(16, createdAt);
        set(17, createdBy);
        set(18, updatedAt);
        set(19, updatedBy);
    }
}
