/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.rbac.domain.tables.daos;


import cn.vertxup.rbac.domain.tables.SVisitant;
import cn.vertxup.rbac.domain.tables.records.SVisitantRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SVisitantDao extends DAOImpl<SVisitantRecord, cn.vertxup.rbac.domain.tables.pojos.SVisitant, String> implements VertxDAO<cn.vertxup.rbac.domain.tables.records.SVisitantRecord,cn.vertxup.rbac.domain.tables.pojos.SVisitant,java.lang.String> {

    /**
     * Create a new SVisitantDao without any configuration
     */
    public SVisitantDao() {
        super(SVisitant.S_VISITANT, cn.vertxup.rbac.domain.tables.pojos.SVisitant.class);
    }

    /**
     * Create a new SVisitantDao with an attached configuration
     */
    public SVisitantDao(Configuration configuration) {
        super(SVisitant.S_VISITANT, cn.vertxup.rbac.domain.tables.pojos.SVisitant.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.rbac.domain.tables.pojos.SVisitant object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByKey(String... values) {
        return fetch(SVisitant.S_VISITANT.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.rbac.domain.tables.pojos.SVisitant fetchOneByKey(String value) {
        return fetchOne(SVisitant.S_VISITANT.KEY, value);
    }

    /**
     * Fetch records that have <code>VIEW_ID IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByViewId(String... values) {
        return fetch(SVisitant.S_VISITANT.VIEW_ID, values);
    }

    /**
     * Fetch records that have <code>PHASE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByPhase(String... values) {
        return fetch(SVisitant.S_VISITANT.PHASE, values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByType(String... values) {
        return fetch(SVisitant.S_VISITANT.TYPE, values);
    }

    /**
     * Fetch records that have <code>IDENTIFIER IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByIdentifier(String... values) {
        return fetch(SVisitant.S_VISITANT.IDENTIFIER, values);
    }

    /**
     * Fetch records that have <code>CONFIG_KEY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByConfigKey(String... values) {
        return fetch(SVisitant.S_VISITANT.CONFIG_KEY, values);
    }

    /**
     * Fetch records that have <code>ACL_VISIBLE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByAclVisible(String... values) {
        return fetch(SVisitant.S_VISITANT.ACL_VISIBLE, values);
    }

    /**
     * Fetch records that have <code>ACL_VIEW IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByAclView(String... values) {
        return fetch(SVisitant.S_VISITANT.ACL_VIEW, values);
    }

    /**
     * Fetch records that have <code>ACL_VARIETY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByAclVariety(String... values) {
        return fetch(SVisitant.S_VISITANT.ACL_VARIETY, values);
    }

    /**
     * Fetch records that have <code>ACL_VOW IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByAclVow(String... values) {
        return fetch(SVisitant.S_VISITANT.ACL_VOW, values);
    }

    /**
     * Fetch records that have <code>ACL_VERGE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByAclVerge(String... values) {
        return fetch(SVisitant.S_VISITANT.ACL_VERGE, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchBySigma(String... values) {
        return fetch(SVisitant.S_VISITANT.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByLanguage(String... values) {
        return fetch(SVisitant.S_VISITANT.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByActive(Boolean... values) {
        return fetch(SVisitant.S_VISITANT.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByMetadata(String... values) {
        return fetch(SVisitant.S_VISITANT.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(SVisitant.S_VISITANT.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByCreatedBy(String... values) {
        return fetch(SVisitant.S_VISITANT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(SVisitant.S_VISITANT.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchByUpdatedBy(String... values) {
        return fetch(SVisitant.S_VISITANT.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.rbac.domain.tables.pojos.SVisitant> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>VIEW_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByViewIdAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.VIEW_ID,values);
    }

    /**
     * Fetch records that have <code>PHASE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByPhaseAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.PHASE,values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByTypeAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.TYPE,values);
    }

    /**
     * Fetch records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByIdentifierAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.IDENTIFIER,values);
    }

    /**
     * Fetch records that have <code>CONFIG_KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByConfigKeyAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.CONFIG_KEY,values);
    }

    /**
     * Fetch records that have <code>ACL_VISIBLE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByAclVisibleAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.ACL_VISIBLE,values);
    }

    /**
     * Fetch records that have <code>ACL_VIEW IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByAclViewAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.ACL_VIEW,values);
    }

    /**
     * Fetch records that have <code>ACL_VARIETY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByAclVarietyAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.ACL_VARIETY,values);
    }

    /**
     * Fetch records that have <code>ACL_VOW IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByAclVowAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.ACL_VOW,values);
    }

    /**
     * Fetch records that have <code>ACL_VERGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByAclVergeAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.ACL_VERGE,values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.SIGMA,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(SVisitant.S_VISITANT.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.METADATA,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(SVisitant.S_VISITANT.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(SVisitant.S_VISITANT.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(SVisitant.S_VISITANT.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
